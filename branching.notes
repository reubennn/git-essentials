* // ---------- BRANCHING ---------- // *
# Branches are cheap
    - Try new ideas -
    - Isolate features or sections of work
# One working directory
# Fast context switching

# List all branches
git branch
//The * indicates you are in this current branch

# Move HEAD to a different branch
git checkout <name of branch>

* // ---------- CREATING BRANCHES ---------- // *
# Create a new branch of an already commited branch while the HEAD is pointing to a different branch
// i.e. master branch
git branch <new branch name> <SHA of the branch that has been committed>

OR:

# If the HEAD is currently pointing to the branch you want to create a new branch in
git switch -c <new branch name>

# Create a branch from the current HEAD
git branch <name of new branch>

#Create a new branch AND switch to this branch
git checkout -b <name of new branch>

* // ---------- BRANCH RENAME ---------- // *
# Change name of a branch
git branch -m <new branch name> //If currently in the branch you want to rename
OR:
git branch -m <original branch name> <new name> // If not in the branch

* // ---------- BRANCH DELETE ---------- // *
# Delete a branch
git branch -d <name of branch> // Safe delete - will check you haven't made a mistake
git branch -D <name of branch> // If the branch has commits which have not been fully merged and you're sure you want to delete it

* // ---------- BRANCH DELETE ---------- // *
#See which branches were merged from the current branch
git branch --merged

# See which branches are not included/were not merged in the current branch
git branch --no-merged

* // ---------- SWITCHING BRANCHES ---------- // *
Switching with uncommited changes:
    - Cannot switch if changes in working directory conflict
    - Can switch if changes in working directory could be applied without conflict
    - Can switch if files are not being tracked

Three Options:
    - Commit the changes to the current branch
    - Remove the changes, checkout the file again
    - Stash the changes